buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
            url 'https://plugins.gradle.org/m2/'
		}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'java'

// Modname, Modid and Versions are set in "init/ModGlobals.java"

version = getMCVersion() + "-" + getVersion()
group = getGroup()
archivesBaseName = getArchiveName()
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20190608-1.14.2'
	
    runs {
        client = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
}

dependencies {
	minecraft "net.minecraftforge:forge:" + getMCVersion() + "-" + getForgeSpec()
}

processResources {
	inputs.property "version", getVersion()
	inputs.property "mcversion", getMCVersion()
	from(sourceSets.main.resources.srcDirs) {
		include 'mods.toml'
		expand 'version':getVersion(), 'mcversion':getMCVersion()
	}
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mods.toml'
	}
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
	archives sourcesJar
	archives deobfJar
}

jar {
    manifest {
        attributes(["Specification-Title": getModName(),
                    "Specification-Vendor": "Lumien",
                    "Specification-Version": getVersion(),
                    "Implementation-Title": getModName(),
                    "Implementation-Version": getVersion(),
                    "Implementation-Vendor" : "Lumien",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
	if (project.hasProperty("signSHA1")) {
		manifest.attributes += ["Fingerprint": project.getProperty("signSHA1")]
	}
}

String getMCVersion() {
	return "1.14.2"
}

String getForgeSpec() {
	return "26.0.16"
}

String getGroup() {
	if (project.hasProperty("jarGroup")) {
		return project.getProperty("jarGroup")
	}
	return "lumien." + getModId()
}

String getVersion() {
	String major = "1"
	String revision = "0"
	String patch = "0"
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String VERSION = \""
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim()
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2)
				String[] pts = s.split("\\.")

				major = pts[0]
				revision = pts[1]
				patch = pts[2]
			}
		}
	}
	return "$major.$revision.$patch"
}

String getModId() {
	String modid = "mymod";
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String MODID = \""
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim()
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2)
				modid = s
			}
		}
	}
	return "$modid"
}

String getModName() {
	String modname = "MyMod"
	if (project.hasProperty("modPropertiesJavaFile")) {
		String prefix = "public static final String NAME = \""
		File file = file(project.modPropertiesJavaFile)
		file.eachLine { String s ->
			s = s.trim()
			if (s.startsWith(prefix)) {
				s = s.substring(prefix.length(), s.length() - 2)
				modname = s
			}
		}
	}
	return "$modname"
}

String getArchiveName() {
	if (project.hasProperty("archiveBase")) {
		return project.archiveBase
	}
	return getModName()
}